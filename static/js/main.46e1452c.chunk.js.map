{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NUMBERS","TEXT_NUMBER_PROPS","includesNumbers","text","some","number","includes","replaceAt","string","index","replacement","substr","length","transformValue","value","startsWith","isText","split","forEach","sign","isNumerical","finalizeTransformation","lines","getTextLines","result","line","isBracket","trim","property","transformedValue","ensureFormatting","removeExtraChars","clearText","indexOf","hyphenIndex","letterToUppercase","toUpperCase","transformHyphens","replace","removeSemicolons","CssDecepticon","useState","inputValue","setInputValue","preRef","setPreRef","reactNatifyCss","copiedCss","strippedCss","prettyCss","setTimeout","ref","select","setSelectionRange","document","execCommand","err","className","autoFocus","onChange","event","target","type","style","height","width","readOnly","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46e1452c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst NUMBERS = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n\nconst TEXT_NUMBER_PROPS = [\"fontWeight\"];\n\nconst includesNumbers = text => NUMBERS.some(number => text.includes(number));\n\nconst isNumerical = text => includesNumbers(text) || text === \".\";\n\nconst isBracket = line => [\"{\", \"}\"].some(sign => line.includes(sign));\n\nconst isColor = text => text.startsWith(\"#\") || text.includes(\"rgb\");\n\nconst isText = text => !includesNumbers(text);\n\nconst isWithinRange = (string, index) => index < string.length;\n\nconst getTextLines = text => text.split(\"\\n\");\n\nconst replaceAt = (string, index, replacement) => {\n  return (\n    string.substr(0, index) +\n    replacement +\n    string.substr(index + 1 + replacement.length)\n  );\n};\n\nconst ensureFormatting = (property, value) => {\n  const transformedValue = `${transformValue(value.trim())}`;\n  const formattedValue = TEXT_NUMBER_PROPS.includes(property)\n    ? `'${transformedValue}'`\n    : transformedValue;\n  return formattedValue;\n};\n\nconst transformValue = value => {\n  if (isColor(value) || isText(value)) {\n    return `'${value}'`;\n  }\n  if (includesNumbers(value)) {\n    // todo: reduce\n    let number = \"\";\n    value.split(\"\").forEach(sign => {\n      if (isNumerical(sign)) {\n        number += sign;\n      }\n    });\n    return number;\n  }\n};\n\nconst transformHyphens = text => {\n  let clearText = text;\n  while (clearText.indexOf(\"-\") !== -1) {\n    const hyphenIndex = clearText.indexOf(\"-\");\n    const letterToUppercase = isWithinRange(clearText, hyphenIndex + 1)\n      ? clearText[hyphenIndex + 1].toUpperCase()\n      : \"\";\n    clearText = replaceAt(clearText, hyphenIndex, letterToUppercase);\n  }\n  return clearText;\n};\n\nconst removeSemicolons = text => text.replace(/;/g, \"\");\n\nconst finalizeTransformation = text => {\n  const lines = getTextLines(text);\n  let result = \"\";\n  lines.forEach(line => {\n    if (isBracket(line)) {\n      result += `${line}\\n`;\n      return;\n    }\n    const [property, value] = line.trim().split(\":\");\n    result += `  ${property.trim()}: ${ensureFormatting(property, value)},\\n`;\n  });\n  return result;\n};\n\nconst removeExtraChars = text => transformHyphens(removeSemicolons(text));\n\nconst copyNatifiedCss = ref => {\n  ref.select();\n  ref.setSelectionRange(0, 99999);\n  document.execCommand(\"copy\");\n};\n\nconst CssDecepticon = () => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [preRef, setPreRef] = useState(null);\n\n  const reactNatifyCss = copiedCss => {\n    try {\n      const strippedCss = removeExtraChars(copiedCss);\n      const prettyCss = finalizeTransformation(strippedCss);\n      setInputValue(prettyCss);\n      setTimeout(() => copyNatifiedCss(preRef));\n    } catch (err) {\n      setInputValue(\"DAFUQ U DID\");\n    }\n  };\n\n  const handleChange = event => reactNatifyCss(event.target.value);\n\n  return (\n    <div className=\"App\">\n      <header>CSS DECEPTICON</header>\n      <div className=\"contentContainer\">\n        <div className=\"side\">\n          <h1>Copy web CSS here</h1>\n          <div className=\"textareaContainer\">\n            <textarea\n              autoFocus\n              onChange={handleChange}\n              type=\"text\"\n              style={{ height: \"100%\", width: \"100%\" }}\n            />\n          </div>\n        </div>\n        <div className=\"side\">\n          <h1>Get RN version</h1>\n          <div className=\"textareaContainer\">\n            <textarea\n              readOnly\n              ref={ref => setPreRef(ref)}\n              type=\"text\"\n              style={{ height: \"100%\", width: \"100%\" }}\n              value={inputValue}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CssDecepticon;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}